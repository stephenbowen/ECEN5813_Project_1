


#platform dependent paramters
ifeq ($(PLATFORM), HOST)
  CPU = cortex-m4
  CC = gcc
	CFLAGS   = -g -Wall -Werror -std=c99 -O0
	CPPFLAGS = -DHOST
  SRCS = ./conversion.c \
         ./data.c       \
         ./debug.c      \
         ./endian.c     \
         ./main.c       \
         ./memory.c 

else ifeq ($(PLATFORM), BBB)
  CPU = cortex-m4
  CC = arm-none-eabi-gcc
	CFLAGS   = -g -Wall -Werror -std=c99 -O0
	CPPFLAGS = -DBBB
  SRCS = ./conversion.c \
         ./data.c       \
         ./debug.c      \
         ./endian.c     \
         ./main.c       \
         ./memory.c 

#else ifeq ($(PLATFORM), KL25Z)
#else
  CPU = cortex-m0plus
  CC = arm-linux-gnueabi-gcc
	CFLAGS   = -g -Wall -Werror -std=c99 -O0 -march=$(CPU)
	CPPFLAGS = =DKL25Z
  SRCS = ./conversion.c      \
         ./data.c            \
         ./debug.c           \
         ./endian.c          \
         ./main.c            \
         ./memory.c          \
         ./arch_arm32.c      \
         ./startup_MKL25Z4.S \
         ./system_MKL25Z4.c  \
  LDFLAGS = 

endif

TARGET_ELF = project1.elf

#platform independent parameters
SPECS    = nosys.specs
INCLUDES = -I./../include/common

#Autogenerated Dependencies
DEPDIR := .d
$(shell mkdir -p $(DEPDIR) >/dev/null)
DEPFLAGS = -MT -$@ -MMD -MP -MF $(DEPDIR)/$*.d

#Objects
OBJS = main.o project1.o memory.o conversion.o debug.o data.o endian.o

.PHONY: clean
clean:
	rm -f *.o *.i *.asm *.elf
	rm -r .d

#Targets
.PHONY: build
build: $(TARGET_ELF)
$(TARGET_ELF): $(OBJS)
	$(CC) $(CFLAGS) $(CPPFLAGS) $(INCLUDES) $(LDFLAGS) -o $@ $^

memory.o: memory.c
	$(CC) $(CFLAGS) $(INCLUDES) $(LDFLAGS) $(DEPFLAGS) -c -o $@ $<

conversion.o: conversion.c
	$(CC) $(CFLAGS) $(CPPFLAGS) $(INCLUDES) $(LDFLAGS) $(DEPFLAGS) -c -o $@ $<

debug.o: debug.c
	$(CC) $(CFLAGS) $(CPPFLAGS) $(INCLUDES) $(LDFLAGS) $(DEPFLAGS) -c -o $@ $<

data.o: data.c
	$(CC) $(CFLAGS) $(CPPFLAGS) $(INCLUDES) $(LDFLAGS) $(DEPFLAGS) -c -o $@ $<

endian.o: endian.c
	$(CC) $(CFLAGS) $(CPPFLAGS) $(INCLUDES) $(LDFLAGS) $(DEPFLAGS) -c -o $@ $<

project1.o: project1.c
	$(CC) $(CFLAGS) $(CPPFLAGS) $(INCLUDES) $(LDFLAGS) $(DEPFLAGS) -c -o $@ $<

main.o: main.c
	$(CC) $(CFLAGS) $(CPPFLAGS) $(INCLUDES) $(LDFLAGS) $(DEPFLAGS) -c -o $@ $<


  
